{"mappings":"YAAO,IAAMA,EAAO,CAClBC,KAAMC,SAASC,cAAc,cAC7BC,SAAUF,SAASC,cAAc,eCF5B,SAASE,EAAiBC,G,IAAEC,EAAFD,EAAEC,GAAIC,EAANF,EAAME,SAAUC,EAAhBH,EAAgBG,SAC/C,MAAO,uCAEGC,OAFoCH,EAAG,2EAGxCG,OADCF,EAAS,oBACDE,OAATD,EAAS,gB,CCJb,IAAME,EACX,mECmBSC,EAAS,WAGlB,I,IAHmBC,EAAIC,UAAAC,OAAA,YAAAD,UAAA,GAAAA,UAAA,GAAG,GACtBP,EAAK,GACLS,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWN,IAC3CA,KACLN,GAAMI,EAAgC,GAAdK,EAAMH,IAEhC,OAAON,C,ECzBF,SAASa,EAAWC,GACzB,IAAMC,EAAO,CAAEf,GAAIK,KAInB,OAHA,IAAIW,SAASF,EAAIG,eAAeC,SAAQ,SAACC,EAAOC,GAC9CL,EAAKK,GAAOD,C,IAEPJ,C,CCDT,SAASM,IACP,OAAOC,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,E,CAG9C,IAAMC,EAAkB,CAAEC,IATjC,SAAaZ,GACX,IAAMa,EAAQP,IACdO,EAAMC,KAAKd,GACXS,aAAaM,QAAQ,OAAQR,KAAKS,UAAUH,G,EAMRI,OAAAX,GCWtC5B,EAAKC,KAAKuC,iBAAiB,UCfpB,SAAuBnB,GAC5BA,EAAIoB,iBACJ,IAAMnB,EAAOF,EAAWC,GACxBqB,QAAQC,IAAIrB,GACZW,EAAgBC,IAAIZ,GACpBtB,EAAKI,SAASwC,mBAAmB,YAAavC,EAAiBiB,G,ICL/DtB,EAAKI,SAASwC,mBACZ,YACAX,EAAgBM,SAASM,IAAIxC,GAAkByC,KAAK,I","sources":["src/js/refs.js","src/js/createCardMarkup.js","node_modules/nanoid/url-alphabet/index.js","node_modules/nanoid/index.browser.js","src/js/createData.js","src/js/localStorageAPI.js","src/index.js","src/js/handlerSubmit.js","src/js/renderCards.js"],"sourcesContent":["export const refs = {\n  form: document.querySelector('#task-form'),\n  taskList: document.querySelector('#task-list'),\n};\n","export function createCardMarkup({ id, taskName, taskText }) {\n  return ` <li class=\"task-list-item\" data-id=${id}>\n      <button class=\"task-list-item-btn\">Delete</button>\n      <h3>${taskName}</h3>\n      <p>${taskText}</p>\n  </li>`;\n}\n","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","import { nanoid } from 'nanoid';\nexport function createData(evt) {\n  const data = { id: nanoid() };\n  new FormData(evt.currentTarget).forEach((value, key) => {\n    data[key] = value;\n  });\n  return data;\n}\n","function add(data) {\n  const array = getAll();\n  array.push(data);\n  localStorage.setItem('ls-k', JSON.stringify(array));\n}\nfunction getAll() {\n  return JSON.parse(localStorage.getItem('ls-k')) || [];\n}\n\nexport const localStorageAPI = { add, getAll };\n","/**\n * Створи список справ.\n * На сторінці є два інпути які має вводиться назва і текст задачі.\n * Після натискання на кнопку \"Додати\" завдання додається до списку #task-list.\n *\n * Розмітка картки задачі\n * <li class=\"task-list-item\">\n *     <button class=\"task-list-item-btn\">Удалить</button>\n *     <h3>Заголовок</h3>\n *     <p>Текст</p>\n * </li>\n *\n * У кожної картки має бути кнопка \"Видалити\", щоб можна було\n * прибрати завдання зі списку.\n * Список із завданнями має бути доступним після перезавантаження сторінки.\n */\nimport { refs } from './js/refs';\nimport { handlerSubmit } from './js/handlerSubmit';\nimport { renderCards } from './js/renderCards';\n\nrefs.form.addEventListener('submit', handlerSubmit);\nrenderCards();\n","import { createCardMarkup } from './createCardMarkup';\nimport { createData } from './createData';\nimport { localStorageAPI } from './localStorageAPI';\nimport { refs } from './refs';\n\nexport function handlerSubmit(evt) {\n  evt.preventDefault();\n  const data = createData(evt);\n  console.log(data);\n  localStorageAPI.add(data);\n  refs.taskList.insertAdjacentHTML('beforeend', createCardMarkup(data));\n}\n","import { createCardMarkup } from './createCardMarkup';\nimport { localStorageAPI } from './localStorageAPI';\nimport { refs } from './refs';\n\nexport function renderCards() {\n  refs.taskList.insertAdjacentHTML(\n    'beforeend',\n    localStorageAPI.getAll().map(createCardMarkup).join('')\n  );\n}\n"],"names":["$37e33676934ad046$export$21666b427502ea6d","form","document","querySelector","taskList","$22dda53a4412261b$export$d2cd6c5d5b0de495","param","id","taskName","taskText","concat","$1e05b56d72c9bb75$export$2b646eea95309f00","$8069ef7e6126e429$export$ac4959f4f1338dfc","size","arguments","length","bytes","crypto","getRandomValues","Uint8Array","$1f80fb9eb0aa349c$export$773d79863eecfeab","evt","data","FormData","currentTarget","forEach","value","key","$48d731dcdd8bc0d3$var$getAll","JSON","parse","localStorage","getItem","$48d731dcdd8bc0d3$export$4a683aab0e79cfdc","add","array","push","setItem","stringify","getAll","addEventListener","preventDefault","console","log","insertAdjacentHTML","map","join"],"version":3,"file":"index.27c5b7f1.js.map"}